@page "/tickets/edit/{Id:guid}"

@attribute [Authorize(Roles = "Admin, Developer")]
@inject NavigationManager Navigation
@inject TicketService TicketService
@inject ProjectService ProjectService

<h3>Edit Ticket</h3>
<hr />

@if (ticket == null)
{
    <p><em>@displayMessage</em></p>
}
else
{
    <EditForm Model="ticket" OnValidSubmit="@UpdateTicket">
        <DataAnnotationsValidator />
        @* this will validate the input against the fields mentioned in the model *@

        @if (projects == null)
        {
            <div>
                <p><em>@displayProjectsMessage</em></p>
            </div>
        }
        else
        {
            <div class="form-group">
                <label for="project-select" class="control-label">Project</label>
                @*TODO: Better to have a search here instead of a select? - select is ok for now*@
                <InputSelect id="project-select" class="custom-select" @bind-Value="@chosenProjectId">
                    @foreach (var project in projects)
                            {
                        <option selected value="@project.Id">@project.Name</option>
                            }
                </InputSelect>
                <ValidationMessage For="@(()=>ticket.Project)" />
            </div>
        }

        <div class="form-group">
            <label for="description-input" class="control-label">* Ticket Description</label>
            <InputText id="description-input" class="form-control" @bind-Value="@ticket.Description" @bind-Value:event="oninput"></InputText>
            <ValidationMessage For="@(() => ticket.Description)" />
        </div>
        <div class="form-group">
            <label for="state-select" class="control-label">* Ticket State</label>
            <InputSelect id="state-select" class="custom-select" @bind-Value="@ticket.Status" @bind-Value:event="oninput">
                <option value="@TicketStatus.Open">Open</option>
                <option value="@TicketStatus.InProgress">In Progress</option>
                <option value="@TicketStatus.Done">Done</option>
                <option value="@TicketStatus.ToDo">To Do</option>
                <option value="@TicketStatus.UnderReview">Under Review</option>
                <option value="@TicketStatus.Approved">Approved</option>
                <option value="@TicketStatus.Cancelled">Cancelled</option>
            </InputSelect>
            <ValidationMessage For="@(() => ticket.Status)" />
        </div>

        @* Think about a good way to display this \/ *@
        @*<div>
                <label for="user-select">Assigned User/s</label>
                <input type="search" id="user-select" class="form-control"
                       @bind-value="userSearchInput" @bind-value:event="oninput"
                       @onkeydown="@SearchUsers" placeholder="Choose User" />
            </div>*@
        <div>
            @* load users onenter in above search *@
            @*@bind-value="userIdToAdd" @bind-value:event="oninput"*@
        </div>

        <NavLink class="btn btn-outline-secondary" href="project-board">
            <span aria-hidden="true">Cancel</span>
        </NavLink>
        <button type="submit" class="btn btn-primary">Update</button>
    </EditForm>
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    private Ticket ticket { get; set; }
    public String displayMessage = "Loading Ticket Details";

    List<Project> projects;
    private Guid chosenProjectId;

    public String displayProjectsMessage = "Loading Projects";

    protected override async Task OnInitializedAsync()
    // any logic/ code needs to go in methods
    {
        base.OnInitialized();

        ticket = await Task.Run(() => TicketService.GetTicketAsync(Id));
        if (ticket == null)
        {
            displayMessage = "Ticket with Id: " + Id + " Not Found";
        }

        if (ticket.Project != null)
        {
            chosenProjectId = ticket.Project.Id;
        }


        projects = await Task.Run(() => ProjectService.GetAllProjectsAsync());
        if (projects == null)
        {
            displayProjectsMessage = "No Projects found, please create a project first in the Projects page.";
        }
    }

    private async Task UpdateTicket()
    {
        ticket.Project = projects.Find((project) => project.Id == chosenProjectId);

        await TicketService.UpdateTicketAsync(ticket);
        Navigation.NavigateTo("project-board");
    }
}
