@page "/tickets/edit/{Id:guid}"

@attribute [Authorize(Roles = "Admin, Developer")]
@inject NavigationManager Navigation
@inject TicketService TicketService
@inject ProjectService ProjectService
@inject UserService UserService

<h3>Edit Ticket</h3>
<hr />

@if (ticket == null)
{
    <p><em>@displayMessage</em></p>
}
else
{
    <EditForm Model="ticket" OnValidSubmit="@UpdateTicket">
        <DataAnnotationsValidator />
        @* this will validate the input against the fields mentioned in the model *@

        @if (projects == null)
        {
            <div>
                <p><em>@displayProjectsMessage</em></p>
            </div>
        }
        else
        {
            <div class="form-group">
                <label for="project-select" class="control-label">Project</label>
                @*TODO: Better to have a search here instead of a select? - select is ok for now*@
                <InputSelect id="project-select" class="custom-select" @bind-Value="@chosenProjectId">
                    @foreach (var project in projects)
                            {
                        <option value="@project.Id">@project.Name</option>
                            }
                </InputSelect>
                <ValidationMessage For="@(()=>ticket.Project)" />
            </div>
        }

        <div class="form-group">
            <label for="description-input" class="control-label">* Ticket Description</label>
            <InputText id="description-input" class="form-control" @bind-Value="@ticket.Description" @bind-Value:event="oninput"></InputText>
            <ValidationMessage For="@(() => ticket.Description)" />
        </div>
        <div class="form-group">
            <label for="state-select" class="control-label">* Ticket State</label>
            <InputSelect id="state-select" class="custom-select" @bind-Value="@ticket.Status" @bind-Value:event="oninput">
                <option value="@TicketStatus.Open">Open</option>
                <option value="@TicketStatus.InProgress">In Progress</option>
                <option value="@TicketStatus.Done">Done</option>
                <option value="@TicketStatus.ToDo">To Do</option>
                <option value="@TicketStatus.UnderReview">Under Review</option>
                <option value="@TicketStatus.Approved">Approved</option>
                <option value="@TicketStatus.Cancelled">Cancelled</option>
            </InputSelect>
            <ValidationMessage For="@(() => ticket.Status)" />
        </div>

        <label for="user-select">Assigned User/s</label>

        @* show chips of already assigned users and allow to remove with - button *@
        @if (assignedUsers != null)
        {
            @foreach (var assignedUser in assignedUsers)
            {
                <RemovableDiscStr DiscName="@assignedUser.UserName" DiscId="@assignedUser.Id" OnEntityUnassignedStr="UnassignUser" />
            }
        }
        <div>
            <div class="d-md-flex">
                <input type="search" id="user-select" class="form-control"
                       @bind-value="searchInput"
                       @onkeypress="@EnterSearch" placeholder="Search Users" />
                <div class="btn btn-outline-primary" @onclick="HandleSearch">
                    <span class="oi oi-magnifying-glass" aria-hidden="true"></span> Search
                </div>
                <div class="btn btn-outline-secondary" @onclick="ClearSearch">Clear Search</div>
            </div>
            @* load users onenter in above search *@
            @if (users == null || users.Count == 0)
            {
                <p><em>@displayUsersMessage</em></p>
            }
            else
            {
                <UsersTable Users="users" Assignable="true" OnAssignUser="AssignUser" />
            }
        </div>

        <NavLink class="btn btn-outline-secondary" href="project-board">
            <span aria-hidden="true">Cancel</span>
        </NavLink>
        <button type="submit" class="btn btn-primary">Update</button>
    </EditForm>
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    private Ticket ticket { get; set; }
    public String displayMessage = "Loading Ticket Details";

    List<Project> projects;
    private Guid chosenProjectId;


    List<ApplicationUser> users;
    private List<ApplicationUser> assignedUsers = new List<ApplicationUser>();


    public String displayProjectsMessage = "Loading Projects";
    public String displayUsersMessage = "";

    private String searchInput = "";

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        ticket = await Task.Run(() => TicketService.GetTicketAsync(Id));
        if (ticket == null)
        {
            displayMessage = "Ticket with Id: " + Id + " Not Found";
        }

        if (ticket.Project != null)
        {
            chosenProjectId = ticket.Project.Id;
        }

        if (ticket.Users != null)
        {
            assignedUsers = ticket.Users;
        }

        projects = await Task.Run(() => ProjectService.GetAllProjectsAsync());
        if (projects == null)
        {
            displayProjectsMessage = "No Projects found, please create a project first in the Projects page.";
        }

        users = await Task.Run(() => UserService.GetAllUsersWithRolesAsync());
        if (users.Count == 0)
        {
            displayUsersMessage = "No Users Found";
        }
    }

    private async Task EnterSearch(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")
        {        // fire on enter
            await HandleSearch();
        }
        else if (eventArgs.Key == "Escape")
        {
            await ClearSearch();
        }
    }

    private async Task HandleSearch()
    {
        users = await UserService.SearchUsersAsync(searchInput);
        if (users.Count == 0)
        {
            displayUsersMessage = "No Users with the name: " + searchInput + " were found.";
        }
    }

    private async Task ClearSearch()
    {
        searchInput = "";
        users = await Task.Run(() => UserService.GetAllUsersWithRolesAsync());
        if (users.Count == 0)
        {
            displayUsersMessage = "No Users Found";
        }
    }

    protected void AssignUser(String id)
    {
        ApplicationUser userToBeAssigned = users.Find((user) => user.Id == id);

        if (!assignedUsers.Contains(userToBeAssigned))
            assignedUsers.Add(userToBeAssigned);
    }

    protected void UnassignUser(String id)
    {
        Console.WriteLine("UnassignUser: ", id);
        if (users != null)
        {
            ApplicationUser userToBeUnassigned = users.Find((user) => user.Id == id);
            if (assignedUsers.Contains(userToBeUnassigned))
                assignedUsers.Remove(userToBeUnassigned);
        }
    }

    private async Task UpdateTicket()
    {
        ticket.Project = projects.Find((project) => project.Id == chosenProjectId);
        
        if (assignedUsers != null && assignedUsers.Count > 0)
            ticket.Users = assignedUsers;

        await TicketService.UpdateTicketAsync(ticket);
        Navigation.NavigateTo("project-board");
    }
}
