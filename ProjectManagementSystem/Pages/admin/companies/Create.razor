@page "/companies/create"

@attribute [Authorize(Roles = "Admin")]
@inject NavigationManager Navigation
@inject CompanyService CompanyService
@inject ProjectService ProjectService

<h3>Create Company</h3>
<hr/>

<EditForm Model="company" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    @* this will validate the input against the fields mentioned in the model *@

    <div class="form-group">
        <label for="description-input" class="control-label">* Company Name</label>
        <InputText id="description-input" class="form-control" @bind-Value="@company.Name"></InputText>
        <ValidationMessage For="@(()=>company.Name)" />
    </div>

    <div>
        <label for="project-select">Assigned Project/s</label>
    </div>
    <div>
        @* show chips of already assigned projects and allow to remove with - button *@
        @if (assignedProjects != null)
        {
            @foreach (var assignedProject in assignedProjects)
            {
                <RemovableDiscGuid DiscName="@assignedProject.Name" DiscId="@assignedProject.Id" OnEntityUnassignedGuid="UnassignProject" />
            }
        }
    </div>
    <div>
        <div class="d-md-flex">
            <input type="search" id="project-select" class="form-control"
                   @bind-value="searchInput"
                   @onkeypress="@EnterSearch" placeholder="Search Users" />
            <div class="btn btn-outline-primary" @onclick="HandleSearch">
                <span class="oi oi-magnifying-glass" aria-hidden="true"></span> Search
            </div>
            <div class="btn btn-outline-secondary" @onclick="ClearSearch">Clear Search</div>
        </div>
        @* load users onenter in above search *@
        @if (projects == null || projects.Count == 0)
        {
            <p><em>@displayProjectsMessage</em></p>
        }
        else
        {
            <ProjectsTable Projects="projects" Assignable="true" OnAssignProject="AssignProject" />
        }
    </div>


    <NavLink class="btn btn-outline-secondary" href="companies">
        <span aria-hidden="true">Cancel</span>
    </NavLink>

    <button type="submit" class="btn btn-primary">Create Company</button>
</EditForm>

@code {
    private Company company { get; set; } = new Company();

    List<Project> projects;
    private List<Project> assignedProjects = new List<Project>();

    private String displayProjectsMessage = "";

    private String searchInput = "";


    private async Task EnterSearch(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")
        {        // fire on enter
            await HandleSearch();
        }
        else if (eventArgs.Key == "Escape")
        {
            ClearSearch();
        }
    }

    private async Task HandleSearch()
    {
        projects = await ProjectService.SearchProjectsAsync(searchInput);
        if (projects.Count == 0)
        {
            displayProjectsMessage = "No Projects with the name: " + searchInput + " were found.";
        }
    }

    private void ClearSearch()
    {
        searchInput = "";
        displayProjectsMessage = "";
        projects = null;
        //projects = await Task.Run(() => ProjectService.GetAllProjects());
        //if (projects.Count == 0)
        //{
        //    displayProjectsMessage = "No Users Found";
        //}
    }

    protected void AssignProject(Guid id)
    {
        Project projectToBeAssigned = projects.Find((project) => project.Id == id);

        if (!assignedProjects.Contains(projectToBeAssigned))
            assignedProjects.Add(projectToBeAssigned);
    }

    protected void UnassignProject(Guid id)
    {
        if (projects != null)
        {
            Project projectToBeUnassigned = projects.Find((project) => project.Id == id);
            if (assignedProjects.Contains(projectToBeUnassigned))
                assignedProjects.Remove(projectToBeUnassigned);
        }
    }

    protected async void HandleValidSubmit()
    {
        if (assignedProjects != null && assignedProjects.Count > 0)
            company.Projects = assignedProjects;

        await CompanyService.InsertCompanyAsync(company);
        Navigation.NavigateTo("companies");
    }
}
