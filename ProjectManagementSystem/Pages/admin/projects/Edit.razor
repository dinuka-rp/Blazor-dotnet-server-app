@page "/projects/edit/{Id:guid}"

@attribute [Authorize(Roles = "Admin")]
@inject NavigationManager Navigation
@inject ProjectService ProjectService
@inject CompanyService CompanyService
@inject UserService UserService

<h3>Edit Project</h3>
<hr />

@if (project == null)
{
    <p><em>@displayMessage</em></p>
}
else
{
    <EditForm Model="project" OnValidSubmit="@UpdateProject">
        <DataAnnotationsValidator />
        @* this will validate the input against the fields mentioned in the model *@

        <div class="form-group">
            <label for="description-input" class="control-label">* Project Code</label>
            <InputText id="description-input" class="form-control" @bind-Value="@project.Code"></InputText>
            <ValidationMessage For="@(() => project.Code)" />
        </div>
        <div class="form-group">
            <label for="description-input" class="control-label">Project Name</label>
            <InputText id="description-input" class="form-control" @bind-Value="@project.Name"></InputText>
            <ValidationMessage For="@(() => project.Name)" />
        </div>
        <div class="form-group">
            <label for="description-input" class="control-label">Project Description</label>
            <InputText id="description-input" class="form-control" @bind-Value="@project.Description"></InputText>
            <ValidationMessage For="@(() => project.Description)" />
        </div>

        <div class="form-group">
            <label for="startedOn-input" class="control-label">Started On</label>
            <InputDate id="startedOn-input" class="form-control" @bind-Value="@project.StartedOn"></InputDate>
            <ValidationMessage For="@(() => project.StartedOn)" />
        </div>

        <div class="form-group">
            <label for="completedOn-input" class="control-label">Completed On</label>
            <InputDate id="completedOn-input" class="form-control" @bind-Value="@project.CompletedOn"></InputDate>
            <ValidationMessage For="@(() => project.CompletedOn)" />
        </div>

        <div>
            @if (companies == null)
            {
                <div>
                    <p><em>@displayCompanyMessage</em></p>
                </div>

            }
            else
            {
                <div class="form-group">
                    <label for="state-select" class="control-label">Assigned Company</label>
                    <InputSelect id="state-select" class="custom-select" @bind-Value="@chosenCompanyId">
                        @foreach (var company in companies)
                                {
                            <option selected value="@company.Id">@company.Name</option>
                                }
                    </InputSelect>
                    <ValidationMessage For="@(()=>project.Company)" />
                </div>
            }


            <div>
                <label for="user-select">Assigned User/s</label>
            </div>
            <div>
                @* show chips of already assigned users and allow to remove with - button *@
                @if (assignedUsers != null)
                {
                    @foreach (var assignedUser in assignedUsers)
                    {
                        <RemovableDiscStr DiscName="@assignedUser.UserName" DiscId="@assignedUser.Id" OnEntityUnassignedStr="UnassignUser" />
                    }
                }
            </div>
            <div>
                <div class="d-md-flex">
                    <input type="search" id="user-select" class="form-control"
                           @bind-value="searchInput"
                           @onkeypress="@EnterSearch" placeholder="Search Users" />
                    <div class="btn btn-outline-primary" @onclick="HandleSearch">
                        <span class="oi oi-magnifying-glass" aria-hidden="true"></span> Search
                    </div>
                    <div class="btn btn-outline-secondary" @onclick="ClearSearch">Clear Search</div>
                </div>
                @* load users onenter in above search *@
                @if (users == null || users.Count == 0)
                {
                    <p><em>@displayUsersMessage</em></p>
                }
                else
                {
                    <UsersTable Users="users" Assignable="true" OnAssignUser="AssignUser" />
                }
            </div>
        </div>

        <NavLink class="btn btn-outline-secondary" href="projects">
            <span aria-hidden="true">Cancel</span>
        </NavLink>

        <button type="submit" class="btn btn-primary">Update Project</button>
    </EditForm>
}

@code {
    [Parameter]
    public Guid Id { get; set; }
    List<Company> companies;
    private Guid chosenCompanyId;

    private Project project { get; set; } = new Project();

    List<ApplicationUser> users;
    private List<ApplicationUser> assignedUsers = new List<ApplicationUser>();

    public String displayMessage = "Loading Project Details";
    public String displayCompanyMessage = "Loading Companies";
    private String displayUsersMessage = "";

    private String searchInput = "";

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        project = await Task.Run(() => ProjectService.GetProjectAsync(Id));
        if (project == null)
        {
            displayMessage = "Project with Id: " + Id + " Not Found";
        }

        if (project.Company != null)
        {
            chosenCompanyId = project.Company.Id;
        }

        if (project.Users != null)
        {
            assignedUsers = project.Users;
        }

        companies = await Task.Run(() => CompanyService.GetAllCompaniesAsync());
        if (companies == null)
        {
            displayCompanyMessage = "No Companies found, please create a company first in the Companies page.";
        }
    }


    private async Task EnterSearch(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")
        {        // fire on enter
            await HandleSearch();
        }
        else if (eventArgs.Key == "Escape")
        {
            ClearSearch();
        }
    }

    private async Task HandleSearch()
    {
        users = await UserService.SearchUsersAsync(searchInput);
        if (users.Count == 0)
        {
            displayUsersMessage = "No Users with the name: " + searchInput + " were found.";
        }
    }

    private void ClearSearch()
    {
        searchInput = "";
        displayUsersMessage = "";
        users = null;
        //users = await Task.Run(() => UserService.GetAllUsersWithRolesAsync());
        //if (users.Count == 0)
        //{
        //    displayUsersMessage = "No Users Found";
        //}
    }

    protected void AssignUser(String id)
    {
        ApplicationUser userToBeAssigned = users.Find((user) => user.Id == id);

        if (!assignedUsers.Contains(userToBeAssigned))
            assignedUsers.Add(userToBeAssigned);
    }

    protected void UnassignUser(String id)
    {
        ApplicationUser userToBeUnassigned = assignedUsers.Find((user) => user.Id == id);
        if (assignedUsers.Contains(userToBeUnassigned))
            assignedUsers.Remove(userToBeUnassigned);
    }

    protected async void UpdateProject()
    {
        project.Company = companies.Find((company) => company.Id == chosenCompanyId);

        await ProjectService.UpdateProjectAsync(project);
        Navigation.NavigateTo("projects");
    }
}
