@page "/users/edit/{Id}"

@attribute [Authorize(Roles = "Admin")]
@inject NavigationManager Navigation
@inject UserService UserService
@inject ProjectService ProjectService

<h3>Edit User</h3>
<hr />

<EditForm Model="user" OnValidSubmit="@UpdateUser">
    <DataAnnotationsValidator />
    @* this will validate the input against the fields mentioned in the model *@

    <div class="form-group">
        <label for="username-input" class="control-label">* Username</label>
        <InputText id="username-input" class="form-control" @bind-Value="@user.UserName"></InputText>
        <ValidationMessage For="@(() => user.UserName)" />
    </div>

    <div class="form-group">
        <label for="firstname-input" class="control-label">* First Name</label>
        <InputText id="firstname-input" class="form-control" @bind-Value="@user.FirstName"></InputText>
        <ValidationMessage For="@(() => user.FirstName)" />
    </div>

    <div class="form-group">
        <label for="lastname-input" class="control-label">Last Name</label>
        <InputText id="lastname-input" class="form-control" @bind-Value="@user.LastName"></InputText>
        <ValidationMessage For="@(() => user.LastName)" />
    </div>

    @if (user.UserRoles == null)
    {
        <div>
            <p><em>@displayMessage</em></p>
        </div>
    }
    else
    {
        <div class="form-group">
            <label for="role-select" class="control-label">User Role</label>
            @*display assigned roles with deletable discs here? -- not required for now*@

            @if (@user.UserRoles.Count != 0)
            {
                @*TODO: test if this works properly with a new user *@
                <InputSelect id="role-select" class="custom-select" @bind-Value="@user.UserRoles.First().RoleId">
                    <option value="@UserRoleEnum.Developer">Developer</option>
                    <option value="@UserRoleEnum.Admin">Admin</option>
                </InputSelect>
                @*<ValidationMessage For="@(()=>user.UserRoles.First().Role.Id)" />*@
            }
            else
            {
                <InputSelect id="role-select" class="custom-select" @bind-Value="@firstUserRole">
                    <option value="@UserRoleEnum.Developer">Developer</option>
                    <option value="@UserRoleEnum.Admin">Admin</option>
                </InputSelect>
            }

        </div>
    }

    <div>
        <label for="project-select">Assigned Project/s</label>
    </div>
    <div>
        @* show chips of already assigned projects and allow to remove with - button *@
        @if (assignedProjects != null)
        {
            @foreach (var assignedProject in assignedProjects)
            {
                <RemovableDiscGuid DiscName="@assignedProject.Name" DiscId="@assignedProject.Id" OnEntityUnassignedGuid="UnassignProject" />
            }
        }
    </div>
    <div>
        <div class="d-md-flex">
            <input type="search" id="project-select" class="form-control"
                   @bind-value="searchInput"
                   @onkeypress="@EnterSearch" placeholder="Search Projects" />
            <div class="btn btn-outline-primary" @onclick="HandleSearch">
                <span class="oi oi-magnifying-glass" aria-hidden="true"></span> Search
            </div>
            <div class="btn btn-outline-secondary" @onclick="ClearSearch">Clear Search</div>
        </div>
        @* load users onenter in above search *@
        @if (projects == null || projects.Count == 0)
        {
            <p><em>@displayProjectsMessage</em></p>
        }
        else
        {
            <ProjectsTable Projects="projects" Assignable="true" OnAssignProject="AssignProject" />
        }
    </div>


    @*assign tickets - only allow this from Edit Ticket side*@

    <NavLink class="btn btn-outline-secondary" href="users">
        <span aria-hidden="true">Cancel</span>
    </NavLink>

    <button type="submit" class="btn btn-primary">Update User</button>
</EditForm>


@code {
    [Parameter]
    public String Id { get; set; }

    private ApplicationUser user { get; set; } = new();
    public String displayMessage = "Loading User Details";
    private UserRoleEnum firstUserRole { get; set; } = UserRoleEnum.Developer;

    List<Project> projects;
    private List<Project> assignedProjects = new List<Project>();

    private String displayProjectsMessage = "";

    private String searchInput = "";

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        user = await Task.Run(() => UserService.GetUserAsync(Id));
        if (user == null)
        {
            displayMessage = "User with Id: " + Id + " Not Found";
        }

        if (user.Projects != null)
        {
            assignedProjects = user.Projects;
        }
    }

    private async Task EnterSearch(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")
        {        // fire on enter
            await HandleSearch();
        }
        else if (eventArgs.Key == "Escape")
        {
            ClearSearch();
        }
    }

    private async Task HandleSearch()
    {
        projects = await ProjectService.SearchProjectsAsync(searchInput);
        if (projects.Count == 0)
        {
            displayProjectsMessage = "No Projects with the name: " + searchInput + " were found.";
        }
    }

    private void ClearSearch()
    {
        searchInput = "";
        displayProjectsMessage = "";
        projects = null;
        //projects = await Task.Run(() => ProjectService.GetAllProjects());
        //if (projects.Count == 0)
        //{
        //    displayProjectsMessage = "No Users Found";
        //}
    }

    protected void AssignProject(Guid id)
    {
        Project projectToBeAssigned = projects.Find((project) => project.Id == id);

        if (!assignedProjects.Contains(projectToBeAssigned))
            assignedProjects.Add(projectToBeAssigned);
    }

    protected void UnassignProject(Guid id)
    {
        Project projectToBeUnassigned = assignedProjects.Find((project) => project.Id == id);
        if (assignedProjects.Contains(projectToBeUnassigned))
            assignedProjects.Remove(projectToBeUnassigned);
    }

    protected async void UpdateUser()
    {
        if (assignedProjects != null && assignedProjects.Count > 0)
            user.Projects = assignedProjects;

        //if(user.UserRoles.Count == 0)
        //{
        //    ApplicationUserRole appUserRole = new ApplicationUserRole(user.Id, firstUserRole);
        //    user.UserRoles.Add(appUserRole);
        //}

        await UserService.UpdateUserAsync(user);
        Navigation.NavigateTo("users");
    }
}
