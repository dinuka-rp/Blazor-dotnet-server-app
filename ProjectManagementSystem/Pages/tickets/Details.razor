@page "/tickets/details/{Id:guid}"

@attribute [Authorize]
@inject NavigationManager Navigation
@inject TicketService TicketService

<h3>Ticket Details</h3>

<hr />

@if (ticket == null)
{
    <p><em>@displayMessage</em></p>
}
else
{
    <dl class="row">
        <dt class="col-sm-2">
            Ticket Description
        </dt>
        <dd class="col-sm-10">
            @ticket.Description
        </dd>
        <dt class="col-sm-2">
            Ticket Status

        </dt>
        <dd class="col-sm-10">@ticket.Status</dd>

        <dt class="col-sm-2">
            Assigned Users
        </dt>
        @if (ticket.Users != null)
        {
            @foreach (var user in ticket.Users)
            {
                <dd class="col-sm-10">
                    @user.FirstName
                </dd>
            }
        }
        else
        {
            <dd class="col-sm-10">
                <em>None</em>
            </dd>
        }
    </dl>

    <a class="btn btn-outline-secondary" href="tickets/edit/@ticket.Id">
        <span class="oi oi-pencil" aria-hidden="true"> Edit Ticket</span>
    </a>
}

@code {
    [Parameter]
    public Guid Id { get; set; }
    public Ticket ticket { get; set; }

    public String displayMessage = "Loading Ticket Details";

    // Similar to Delete
    protected override async Task OnInitializedAsync()
    // any logic/ code needs to go in methods
    {
        base.OnInitialized();

        ticket = await Task.Run(() => TicketService.GetTicketAsync(Id));
        if (ticket == null)
        {
            displayMessage = "Ticket with Id: " + Id + " Not Found";
        }
    }
}
